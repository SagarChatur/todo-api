import Head from "next/head";
import { useEffect, useState } from "react";
import axios from "axios";
import Styles from "../styles/Home.module.css";
import Loader from "../components/Loader";
import { Container, Form, Col, Row, Button } from "react-bootstrap";

export default function Home() {
  const [todos, setTodos] = useState([]);
  const [formData, setFormData] = useState({ todoName: "", isComplete: false });
  const [editId, setEditId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [buttonText, setButtonText] = useState("Add Task");

  useEffect(() => {
    async function fetchData() {
      try {
        const response = await axios.get(
          "https://calm-plum-jaguar-tutu.cyclic.app/todos"
        );
        if (Array.isArray(response.data.data)) {
          setTodos(response.data.data.reverse());
          setLoading(false);
        } else {
          console.error("API response data is not an array:", response.data);
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        setLoading(false);
      }
    }
    fetchData();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log("Form Data submitted:", formData);
  
    try {
      const dataToSend = { ...formData };
      if (editId) {
        await axios.put(
          `https://calm-plum-jaguar-tutu.cyclic.app/todos/${editId}`,
          dataToSend
        );
        window.alert("Data updated successfully.");
      } else {
        await axios.post("https://calm-plum-jaguar-tutu.cyclic.app/todos", dataToSend);
        window.alert("New task added successfully.");
      }
  

      const response = await axios.get("https://calm-plum-jaguar-tutu.cyclic.app/todos");
      if (Array.isArray(response.data.data)) {
        setTodos(response.data.data.reverse());
      } else {
        console.error("API response data is not an array:", response.data);
      }
  
      setFormData({ todoName: "", isComplete: false });
      setEditId(null);
    } catch (error) {
      console.error("Error:", error);
      window.alert("Error updating data.");
    }
  };

  const handleEdit = (todo) => {
    setFormData({ todoName: todo.todoName, isComplete: todo.isComplete });
    setEditId(todo._id);
    setButtonText("Update");
    console.log("Editing todo:", todo);
  };

  const allCompletedTodos = todos.filter((todo) => todo.isComplete);
  const allIncompleteTodos = todos.filter((todo) => !todo.isComplete);

  const CompletedTodos = allCompletedTodos.slice(0, 5);
  const IncompleteTodos = allIncompleteTodos.slice(0, 5);

  const handleDelete = async (id) => {
    try {
      await axios.delete(
        `https://calm-plum-jaguar-tutu.cyclic.app/todos/${id}`
      );
      const response = await axios.get(
        "https://calm-plum-jaguar-tutu.cyclic.app/todos"
      );
      if (Array.isArray(response.data.data)) {
        setTodos(response.data.data.reverse());
        setLoading(false);
        window.alert("Todo deleted successfully.");
      } else {
        console.error("API response data is not an array:", response.data);
      }
    } catch (error) {
      console.error("Error:", error);
      setLoading(false);
      window.alert("Error deleting todo.");
    }
  };

  return (
    <div className={Styles.container}>
      <Head>
        <title>API Test | Test 2</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <div>
          <div className={`${Styles.form__Container}`}>
            <h1 className="pb-4">Todo List</h1>
            <Form onSubmit={handleSubmit} className="text-center">
              <Row>
                <Col sm={8} md={6} lg={8} xs={12}>
                  <input
                    type="text"
                    placeholder="Todo Task"
                    value={formData.todoName}
                    onChange={(e) =>
                      setFormData({ ...formData, todoName: e.target.value })
                    }
                  />
                </Col>
                <Col
                  sm={1}
                  md={3}
                  lg={2}
                  xs={6}
                  className="d-flex justify-content-center align-items-center gap-2"
                >
                  <input
                    type="checkbox"
                    checked={formData.isComplete}
                    onChange={() =>
                      setFormData({
                        ...formData,
                        isComplete: !formData.isComplete,
                      })
                    }
                  />
                  <label> Completed </label>
                </Col>
                <Col sm={3} md={3} lg={2} xs={6}>
                  <Button
                    type="submit"
                    variant="outline-success"
                    className={Styles.button_Main}
                  >
                    {buttonText}
                  </Button>
                </Col>
              </Row>
            </Form>
            <Row className="gx-5">
              <Col sm={6} className={Styles.box__Container}>
                {loading ? (
                  <div>
                    <Loader />
                  </div>
                ) : (
                  <div>
                    <h4 className="pb-3">Completed Tasks</h4>
                    <ul>
                      {CompletedTodos.map((todo) => (
                        <li key={todo._id} className={Styles.listCard}>
                          {todo.todoName} - Completed <br />
                          <button
                            onClick={() => handleEdit(todo)}
                            className={`${Styles.edit_btn} btn`}
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDelete(todo._id)}
                            className={`${Styles.delete_btn} btn`}
                          >
                            Delete
                          </button>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </Col>

              <Col sm={6} className={Styles.box__Container}>
                {loading ? (
                  <div>
                    <Loader />
                  </div>
                ) : (
                  <div>
                    <h4 className="pb-3">Incomplete Tasks </h4>
                    <ul>
                      {IncompleteTodos.map((todo) => (
                        <li key={todo._id} className={Styles.listCard}>
                          {todo.todoName} - Incomplete <br />
                          <button
                            onClick={() => handleEdit(todo)}
                            className={`${Styles.edit_btn} btn`}
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDelete(todo._id)}
                            className={`${Styles.delete_btn} btn`}
                          >
                            Delete
                          </button>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </Col>
            </Row>
          </div>
        </div>
      </Container>
    </div>
  );
}
